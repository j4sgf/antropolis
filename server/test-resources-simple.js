const Resource = require('./models/Resource');
const ColonyResource = require('./models/ColonyResource');

async function demonstrateResourceTypes() {
  console.log('üåü ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üêú ANTOCRACY RESOURCE MANAGEMENT SYSTEM - Types & Zones');
  console.log('üåü ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  try {
    // 1. Display available resource types
    console.log('üìö Available Resource Types:');
    const resourceTypes = Resource.getResourceTypes();
    
    Object.values(resourceTypes).forEach(type => {
      console.log(`üåø ${type.displayName}:`);
      console.log(`   ‚Ä¢ Nutritional Value: ${type.nutritionalValue} points`);
      console.log(`   ‚Ä¢ Decay Rate: ${type.decayRate * 100}% per hour`);
      console.log(`   ‚Ä¢ Storage Requirement: ${type.storageRequirement} units per item`);
      console.log(`   ‚Ä¢ Collection Time: ${type.baseCollectionTime} seconds`);
      console.log(`   ‚Ä¢ Rarity: ${type.rarityLevel}`);
      console.log(`   ‚Ä¢ Description: ${type.description}\n`);
    });

    // 2. Display storage zones
    console.log('üè† Available Storage Zones:');
    const storageZones = ColonyResource.getStorageZones();
    
    Object.values(storageZones).forEach(zone => {
      console.log(`üì¶ ${zone.displayName}:`);
      console.log(`   ‚Ä¢ Capacity: ${zone.capacity} storage units`);
      console.log(`   ‚Ä¢ Description: ${zone.description}\n`);
    });

    // 3. Demonstrate resource calculations
    console.log('üßÆ Resource Calculation Examples:');
    
    // Example resource with quality degradation
    const exampleResource = {
      type: 'leaves',
      quantity: 50,
      quality: 85 // 85% quality due to some decay
    };
    
    const leafConfig = resourceTypes.LEAVES;
    const effectiveNutrition = Math.floor(leafConfig.nutritionalValue * (exampleResource.quality / 100) * exampleResource.quantity);
    const storageUsed = leafConfig.storageRequirement * exampleResource.quantity;
    
    console.log(`üìä Example: ${exampleResource.quantity} ${leafConfig.displayName} at ${exampleResource.quality}% quality:`);
    console.log(`   ‚Ä¢ Base nutrition per unit: ${leafConfig.nutritionalValue}`);
    console.log(`   ‚Ä¢ Effective nutrition per unit: ${Math.floor(leafConfig.nutritionalValue * (exampleResource.quality / 100))}`);
    console.log(`   ‚Ä¢ Total nutritional value: ${effectiveNutrition} points`);
    console.log(`   ‚Ä¢ Storage space required: ${storageUsed} units\n`);

    // 4. Decay calculation example
    console.log('‚è∞ Decay Calculation Example:');
    const hoursElapsed = 24; // 24 hours
    const originalQuality = 100;
    const decayAmount = leafConfig.decayRate * hoursElapsed * 100;
    const newQuality = Math.max(0, originalQuality - decayAmount);
    
    console.log(`üåø ${leafConfig.displayName} after ${hoursElapsed} hours:`);
    console.log(`   ‚Ä¢ Original quality: ${originalQuality}%`);
    console.log(`   ‚Ä¢ Decay rate: ${leafConfig.decayRate * 100}% per hour`);
    console.log(`   ‚Ä¢ Total decay: ${decayAmount}%`);
    console.log(`   ‚Ä¢ Final quality: ${newQuality}%\n`);

    // 5. Storage zone capacity example
    console.log('üì¶ Storage Zone Utilization Example:');
    const generalStorage = storageZones.GENERAL;
    console.log(`üì¶ ${generalStorage.displayName} (${generalStorage.capacity} capacity):`);
    
    // Simulate mixed storage
    const storedResources = [
      { type: 'leaves', quantity: 100, storageReq: 1 },
      { type: 'fungus', quantity: 50, storageReq: 2 },
      { type: 'seeds', quantity: 75, storageReq: 1 }
    ];
    
    let totalUsed = 0;
    storedResources.forEach(resource => {
      const used = resource.quantity * resource.storageReq;
      totalUsed += used;
      const config = resourceTypes[resource.type.toUpperCase()];
      console.log(`   ‚Ä¢ ${resource.quantity} ${config.displayName}: ${used} storage units`);
    });
    
    const utilization = ((totalUsed / generalStorage.capacity) * 100).toFixed(1);
    console.log(`   ‚Ä¢ Total used: ${totalUsed}/${generalStorage.capacity} (${utilization}%)\n`);

    // 6. Resource conversion example
    console.log('üîÑ Resource Conversion Example:');
    console.log('Converting leaves to fungus through colony processing:');
    
    const inputLeaves = 20;
    const conversionEfficiency = 0.6; // 60% efficiency
    const outputFungus = Math.floor(inputLeaves * conversionEfficiency);
    const inputNutrition = inputLeaves * resourceTypes.LEAVES.nutritionalValue;
    const outputNutrition = outputFungus * resourceTypes.FUNGUS.nutritionalValue;
    
    console.log(`   üì• Input: ${inputLeaves} leaves (${inputNutrition} nutrition)`);
    console.log(`   ‚öôÔ∏è  Conversion efficiency: ${conversionEfficiency * 100}%`);
    console.log(`   üì§ Output: ${outputFungus} fungus (${outputNutrition} nutrition)`);
    console.log(`   üìà Nutrition gain: ${outputNutrition - inputNutrition} points\n`);

    console.log('üéâ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üéØ RESOURCE SYSTEM CONFIGURATION DEMONSTRATION COMPLETE!');
    console.log('üéâ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log();
    console.log('‚úÖ Successfully demonstrated:');
    console.log('   ‚Ä¢ 5 resource types with different properties');
    console.log('   ‚Ä¢ 4 storage zones with capacity management');
    console.log('   ‚Ä¢ Resource quality and decay mechanics');
    console.log('   ‚Ä¢ Storage space calculations');
    console.log('   ‚Ä¢ Resource conversion efficiency');
    console.log('   ‚Ä¢ Nutritional value calculations');
    console.log();
    console.log('üöÄ Ready for implementation of:');
    console.log('   ‚Ä¢ Foraging pathfinding algorithms (Subtask 6.2)');
    console.log('   ‚Ä¢ Colony storage integration (Subtask 6.3)');
    console.log('   ‚Ä¢ Visual foraging systems (Subtask 6.4)');
    console.log('   ‚Ä¢ Resource events and mechanics (Subtask 6.5)');

  } catch (error) {
    console.error('‚ùå Demo failed:', error);
  }
}

// Run the demonstration
if (require.main === module) {
  demonstrateResourceTypes().then(() => {
    console.log('\nüõë Resource types demo complete!');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Demo crashed:', error);
    process.exit(1);
  });
}

module.exports = { demonstrateResourceTypes }; 